{"version":3,"sources":["components/Display.tsx","components/Keys.tsx","containers/Calculator.tsx","App.tsx","index.tsx"],"names":["Display","displayValue","history","type","className","value","id","disabled","Keys","handleOperator","resetCalculator","inputDigit","inputDecimal","setFormula","setEqualPressed","handleClick","e","target","valueArray","Number","isInteger","parseFloat","toString","onClick","Calculator","useState","setDisplayValue","firstOperand","setfirstOperand","waitingSecondOp","setWaitingSecondOp","operator","setOperator","formula","equalPressed","calculate","secondOperand","join","replace","nextOperator","slice","inputValue","isNaN","result","toFixed","digit","dot","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.829c07b4.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\ninterface DisplayProps {\n  displayValue: string;\n  history: string;\n}\n\nfunction Display({ displayValue, history }: DisplayProps) {\n  return (\n    <Fragment>\n      <input\n        type='text'\n        className='Formula'\n        value={history}\n        id='display'\n        disabled\n      />\n      <input\n        type='text'\n        className='Display'\n        value={displayValue}\n        id='display'\n        disabled\n      />\n    </Fragment>\n  );\n}\n\nexport default Display;\n","import React from 'react';\n\ninterface KeysProps {\n  handleOperator(a: string): void;\n  resetCalculator(): void;\n  inputDigit(a: string): void;\n  inputDecimal(a: string): void;\n  setFormula: React.Dispatch<React.SetStateAction<string[]>>;\n  setEqualPressed: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction Keys({\n  handleOperator,\n  resetCalculator,\n  inputDigit,\n  inputDecimal,\n  setFormula,\n  setEqualPressed,\n}: KeysProps) {\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const value = (e.target as HTMLButtonElement).value; // needs to be explicitly tell TS about the kind of HTML button is present\n\n    switch (value) {\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n      case '=':\n        handleOperator(value);\n        if (value !== '=') {\n          setFormula((valueArray) => [...valueArray, value]);\n        } else {\n          setEqualPressed(true);\n        }\n        break;\n      case '.':\n        inputDecimal(value);\n        setFormula((valueArray) => [...valueArray, value]);\n        break;\n      case 'all-clear':\n        resetCalculator();\n        break;\n      default:\n        if (Number.isInteger(parseFloat(value))) {\n          inputDigit(value.toString());\n          setFormula((valueArray) => [...valueArray, value]);\n        }\n    }\n  };\n\n  return (\n    <div className='Keys'>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='operator'\n        value='+'\n        id='add'\n      >\n        +\n      </button>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='operator'\n        value='-'\n        id='subtract'\n      >\n        -\n      </button>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='operator'\n        value='*'\n        id='multiply'\n      >\n        &times;\n      </button>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='operator'\n        value='/'\n        id='divide'\n      >\n        &divide;\n      </button>\n\n      <button\n        onClick={(e) => handleClick(e)}\n        type='button'\n        value='7'\n        id='seven'\n      >\n        7\n      </button>\n      <button onClick={handleClick} type='button' value='8' id='eight'>\n        8\n      </button>\n      <button onClick={handleClick} type='button' value='9' id='nine'>\n        9\n      </button>\n\n      <button onClick={handleClick} type='button' value='4' id='four'>\n        4\n      </button>\n      <button onClick={handleClick} type='button' value='5' id='five'>\n        5\n      </button>\n      <button onClick={handleClick} type='button' value='6' id='six'>\n        6\n      </button>\n\n      <button onClick={handleClick} type='button' value='1' id='one'>\n        1\n      </button>\n      <button onClick={handleClick} type='button' value='2' id='two'>\n        2\n      </button>\n      <button onClick={handleClick} type='button' value='3' id='three'>\n        3\n      </button>\n\n      <button onClick={handleClick} type='button' value='0' id='zero'>\n        0\n      </button>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='decimal function'\n        value='.'\n        id='decimal'\n      >\n        .\n      </button>\n      <button\n        onClick={handleClick}\n        type='button'\n        className='all-clear function'\n        value='all-clear'\n        id='clear'\n      >\n        AC\n      </button>\n\n      <button\n        onClick={handleClick}\n        type='button'\n        className='equal-sign operator'\n        value='='\n        id='equals'\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nexport default Keys;\n","import React, { useEffect, useState } from 'react';\nimport Display from '../components/Display';\nimport Keys from '../components/Keys';\n\nfunction Calculator() {\n  // Basic Logic of Calculator\n  // firstOperand + operator + secondOperator\n\n  // Display Value State\n  const [displayValue, setDisplayValue] = useState<string>('0');\n  const [firstOperand, setfirstOperand] = useState<number | null>(null);\n  const [waitingSecondOp, setWaitingSecondOp] = useState(false);\n  const [operator, setOperator] = useState<string | null>(null);\n  const [formula, setFormula] = useState<string[]>([]); // set to an empty array but typescripted to be an array of script\n  const [equalPressed, setEqualPressed] = useState(false);\n  // const [result, setResult] = useState(null);\n\n  // <------ Operator Functions ------>\n  // input should be string\n  const inputDigit = (digit: string): void => {\n    if (waitingSecondOp) {\n      displayValue === '-'\n        ? setDisplayValue(displayValue + digit)\n        : setDisplayValue(digit);\n      setWaitingSecondOp(false);\n    } else if (displayValue === '0') {\n      setDisplayValue(digit);\n    } else {\n      const value = displayValue + digit;\n      setDisplayValue(value);\n    }\n  };\n\n  const inputDecimal = (dot: string): void => {\n    if (waitingSecondOp) {\n      setDisplayValue('0.');\n      setWaitingSecondOp(false);\n      return;\n    }\n\n    if (!displayValue.includes(dot)) {\n      setDisplayValue(displayValue + dot);\n    }\n  };\n\n  const handleOperator = (nextOperator: string): void => {\n    if (operator && waitingSecondOp) {\n      if (nextOperator === '-' && !equalPressed) {\n        setDisplayValue('-');\n        return;\n      } else {\n        setFormula(formula.slice(-1));\n        setOperator(nextOperator);\n        return;\n      }\n    }\n\n    let inputValue = parseFloat(displayValue);\n\n    if (firstOperand === null && !isNaN(inputValue)) {\n      setfirstOperand(inputValue);\n    } else if (operator && !waitingSecondOp) {\n      const result = calculate(firstOperand, inputValue, operator);\n      if (result) {\n        setDisplayValue(`${parseFloat(result.toFixed(7))}`);\n        setfirstOperand(result);\n        if (nextOperator === '=') {\n          setFormula((valueArray) => [...valueArray, '=']);\n          setFormula((valueArray) => [...valueArray, result.toString()]);\n        }\n      }\n    }\n    setWaitingSecondOp(true);\n    setOperator(nextOperator);\n  };\n\n  // Calculate Function\n\n  const calculate = (\n    firstOperand: number | null,\n    secondOperand: number,\n    operator: string\n  ): number | undefined => {\n    if (!firstOperand) return;\n    if (operator === '+') {\n      return firstOperand + secondOperand;\n    } else if (operator === '-') {\n      return firstOperand - secondOperand;\n    } else if (operator === '*') {\n      return firstOperand * secondOperand;\n    } else if (operator === '/') {\n      return firstOperand / secondOperand;\n    }\n\n    return secondOperand;\n  };\n\n  // Reset Calculator\n\n  const resetCalculator = () => {\n    setDisplayValue('0');\n    setfirstOperand(null);\n    setWaitingSecondOp(false);\n    setOperator(null);\n    setFormula([]);\n    setEqualPressed(false);\n  };\n\n  return (\n    <div className='Calculator'>\n      <Display\n        displayValue={displayValue}\n        history={formula\n          .join(' ')\n          .replace(/\\*/g, '×')\n          .replace(/\\//g, '÷')\n          .replace(/-/g, '‑')}\n      />\n      <Keys\n        handleOperator={handleOperator}\n        resetCalculator={resetCalculator}\n        inputDigit={inputDigit}\n        inputDecimal={inputDecimal}\n        setFormula={setFormula}\n        setEqualPressed={setEqualPressed}\n      />\n    </div>\n  );\n}\n\nexport default Calculator;\n","import Calculator from './containers/Calculator';\n\nfunction App() {\n  return (\n    <div className='App h-screen w-screen'>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}